name: Build STARpp - Linux
on:
  workflow_call:
    secrets:
      qt_ffynnon_cred:
        description: 'Credentials for getting Qt from Ffynnon'
        required: true
env:
  qt_install_dir: ${{ github.workspace }}/Qt/Install
  starpp_src_suffix: STARpp/Source
  starpp_src_dir: ${{ github.workspace }}/STARpp/Source
  starpp_build_dir: ${{ github.workspace }}/STARpp/Build

jobs:
  build-starpp:
    name: Build STARpp - Linux (Release)
    strategy:
      matrix:
        qt_linkage: [shared, static]
    runs-on: ubuntu-20.04
    env:
      c_comp: clang-12
      cxx_comp: clang++-12
      cmake_gen: Ninja Multi-Config
    steps:
    - name: Set derived variables with shell because GitHub Actions env context sucks
      run: |  
        echo "starpp_package_path=${{ env.starpp_build_dir }}/out/dist" >> $GITHUB_ENV
        starpp_install_path="${{ env.starpp_build_dir }}/out/install"
        echo "starpp_install_path=$starpp_install_path" >> $GITHUB_ENV
        echo "qt_cmake=$qt_install_dir/bin/qt-cmake" >> $GITHUB_ENV
    - name: Install Qt (custom build)
      uses: oblivioncth/actions/general/install-and-cache-qt-from-ffynnon@dev
      with:
        version: 6.4.2
        os: linux
        compiler: clang12
        linkage: ${{ matrix.qt_linkage }}
        path: ${{ env.qt_install_dir }}
        credentials: ${{ secrets.qt_ffynnon_cred }}
    - name: Install Doxygen
      uses: oblivioncth/actions/ubuntu/install-doxygen-from-sourceforge@dev
      with:
        version: 1.9.4
    - name: Install Graphviz
      run: sudo apt-get install graphviz
    - name: Install Ninja
      run: sudo apt-get install ninja-build
    - name: Install Harfbuzz
      run: sudo apt-get install libharfbuzz-dev
    - name: Install XCB Related libs
      run: sudo apt-get install libxkbcommon-x11-dev libxcb-*-dev
    - name: Install OpenGL lib
      run: sudo apt-get install libglu1-mesa-dev # TODO: See if this can be avoided, for some reason qhelpgenerator needs this, maybe its because it was available during compilation
    - name: Checkout STARpp
      uses: actions/checkout@v3
      with:
        path: ${{ env.starpp_src_suffix }}
        fetch-depth: 0 # Required for verbose versioning to work correctly
    - name: Build/Install STARpp
      working-directory: ${{ env.starpp_src_dir }}
      run: |
        echo Configuring CMake...
        "$qt_cmake" -G "$cmake_gen" -S "$starpp_src_dir" -B "$starpp_build_dir" -D CMAKE_CXX_COMPILER="$cxx_comp" -D CMAKE_C_COMPILER="$c_comp"  -D STARPP_TESTS=ON -D STARPP_DOCS=ON
        echo Changing to build directory...
        cd "$starpp_build_dir"
        echo Building STARpp Debug...
        cmake --build . --target starpp_base --config Debug
        echo Building STARpp Release...
        cmake --build . --target all --config Release
        echo Building STARpp Docs...
        cmake --build . --target starpp_docs --config Release
        echo Installing STARpp Debug
        cmake --install . --config Debug
        echo Installing STARpp Release/Docs
        cmake --install . --config Release
        echo Packaging STARpp...
        cpack -C "Release"
        echo Running tests...
        cmake --build . --target test --config Release
        echo Build complete.
    - name: Get STARpp artifact name
      id: get_artifact_name
      run: |
        cpack_name=$(find "${{ env.starpp_package_path }}" -type f -name "*.zip")
        artifact_name=$(basename "$cpack_name" .zip)
        echo "current_artifact_name=$artifact_name" >> $GITHUB_ENV
    - name: Upload STARpp build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.current_artifact_name }}
        path: ${{ env.starpp_install_path }}
        if-no-files-found: error
